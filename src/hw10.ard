\import Function.Meta
\import Logic.Meta
\import Meta
\import Paths.Meta
\import lect07 \hiding (<=-refl, baz, isEven)
\import lect10
\import Utils

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  \lam {x} {y} p1 => p $ q p1

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam {x} {y} p1 => p $ pmap g p1

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultipleOf3Or5 (n : Nat) : \Type => Either (mod3 n = 0) (\Sigma (mod5 n = 0) (Not (mod3 n = 0)))

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) => \lam x y => \case \elim x, \elim y \with {
  | Either.inl a, Either.inl a1 => pmap Utils.inl $ nat-eq-isProp _ _
  | Either.inl a, Either.inr (b, b1) => contradiction
  | Either.inr (b, b1), Either.inl a => contradiction
  | Either.inr (b, b1), Either.inr (b2, b3) => pmap Utils.inr $ Sigma-isProp nat-eq-isProp not-isProp _ _
}

\func not-isProp {t : \Type} : isProp (Not t) => \lam x y => ext

\func nat-eq-isProp {n m : Nat} : isProp (n = m) \elim n, m
  | 0, 0 => \lam x y => ext
  | 0, suc m => contradiction
  | suc n, 0 => contradiction
  | suc n, suc m => \lam x y => ext

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam {x} {y} p => ext (p, isMultipleOf3Or5-isProp _ _ _)

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) => (
  \lam (a, aa) =>
      (\lam x y =>
        rewriteI (aa x) (aa y),
        a
      ),
  \lam (i, a) => (a, \lam a' => i _ _)
)

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty =>
  \let x => p Unit-isProp Unit-isProp (Either.inr ()) (Either.inl ()) \in contradiction

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) \elim n, m
  | 0, 0 => \lam x y => \case \elim x, \elim y \with {
    | z<=n, z<=n => idp
  }
  | 0, suc m => \lam x y => \case \elim x, \elim y \with {
    | z<=n, z<=n => idp
  }
  | suc n, 0 => \lam x y => \case \elim x
  | suc n, suc m => \lam x y => \case \elim x, \elim y \with {
    | s<=s x, s<=s y => pmap s<=s $ LessOrEq-isProp x y
  }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => \lam x y =>
  \case \elim x, \elim y \with {
    | refl p, refl p1 => pmap refl $ nat-eq-isProp _ _
    | refl p, inc r => \case nat-eq-T-lt p r
    | inc r, refl p => \case nat-eq-T-lt p r
    | inc r, inc r1 => pmap inc $ ext
  }

\func nat-eq-T-lt {n m : Nat} (eq : n = m) (lt : T (n < m)) : Empty \elim n, m
  | 0, 0 => lt
  | 0, suc m => contradiction
  | suc n, 0 => contradiction
  | suc n, suc m => nat-eq-T-lt {n} {m} (pmap pred eq) lt

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  \let x => p 0 0 (refl idp) (inc z<=n) \in contradiction

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam x y => p $ q (f x) (f y)

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => {?}

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) =>
  setLem
    OrEq
    (\lam x y x1 y1 => OrEq-eq p q x y x1 y1)
    OrEq-refl
    (\lam {a} {a'} o => OrEq-actual-eq _ _ o)
\where {
  \data OrEq {A B : \Type} (x y : Or A B) \elim x, y
    | inl xa, inl ya => OrEq-inl (xa = ya)
    | inr xb, inr yb => OrEq-inr (xb = yb)
  \func OrEq-eq {A B : \Type} (setA : isSet A) (setB : isSet B) (x y : Or A B) (eq1 eq2 : OrEq x y) : eq1 = eq2 \elim x, y, eq1, eq2
    | inl xa, inl ya, OrEq-inl p, OrEq-inl p1 => pmap OrEq-inl $ setA _ _ _ _
    | inr xb, inr yb, OrEq-inr p, OrEq-inr p1 => pmap OrEq-inr $ setB _ _ _ _
  \func OrEq-refl {A B : \Type} (x : Or A B) : OrEq x x \elim x
    | inl a => OrEq-inl idp
    | inr b => OrEq-inr idp
  \func OrEq-actual-eq {A B : \Type} (x y : Or A B) (eq : OrEq x y) : x = y
    | inl xa, inl ya, OrEq-inl p => rewrite p idp
    | inr xb, inr yb, OrEq-inr p => rewrite p idp
}

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) => {?}

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A) =>
  setLem
    ListEq
    (ListEq-eq pA)
    (\lam a => ListEq-refl)
    (\lam {a} {a'} l => ListEq-actualy-eq l)
\where {
  \data ListEq {A : \Type} (xs ys : List A) \elim xs,ys
    | nil, nil => ListEq-nil
    | :: x xs, :: y ys => ListEq-cons (x = y) (ListEq xs ys)
  \func ListEq-eq {A : \Type} (set : isSet A) (xs ys : List A) (eq1 eq2 : ListEq xs ys) : eq1 = eq2 \elim xs, ys, eq1, eq2
    | nil, nil, ListEq-nil, ListEq-nil => idp
    | :: x xs, :: y ys, ListEq-cons p eq1, ListEq-cons p1 eq2 =>
      rewrite (ListEq-eq set xs ys eq1 eq2) $
      pmap (\lam pp => ListEq-cons pp eq2) $
      set _ _ _ _
  \func ListEq-refl {A : \Type} {l : List A} : ListEq l l \elim l
    | nil => ListEq-nil
    | :: a l => ListEq-cons idp ListEq-refl
  \func ListEq-actualy-eq {A : \Type} {xs ys : List A} (eq : ListEq xs ys) : xs = ys
    | {A}, {nil}, {nil}, ListEq-nil => idp
    | {A}, {:: x xs}, {:: y ys}, ListEq-cons p eq => rewrite p $ pmap (y ::) $ ListEq-actualy-eq eq
}


-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f,g : \Pi (x : A) -> B x, то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n => {?}