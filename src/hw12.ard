\import Utils
\import lect01 ($)
\import lect12

-- 1. Определите функцию negPred : Int -> Int такую, что negPred x = x, если x > 0, и negPred x = x - 1, если x <= 0.

\func negPred (x : Int) : Int \elim x
  | pos 0 => neg 1
  | pos n => pos n
  | neg n => neg (suc n)
\where {
  \func test1 (x : Int) : negPred (pos 1) = pos 1 => idp
  \func test2 (x : Int) : negPred (pos 2) = pos 2 => idp
  \func test3 (x : Int) : negPred (pos 0) = neg 1 => idp
  \func test4 (x : Int) : negPred (neg 0) = neg 1 => idp
  \func test5 (x : Int) : negPred (neg 1) = neg 2 => idp
}

-- 2. Определите функции сложения и умножения для Int.

\func \infixl 6 + (x y : Int) : Int \elim x, y
  | pos x, pos y => pos (x Nat.+ y)
  | neg (suc x), neg (suc y) => neg (suc x Nat.+ suc y)
  | neg 0, pos y => pos y
  | neg x, pos 0 => neg x
  | neg (suc x), pos (suc y) => neg x + pos y
  | pos 0, neg x => neg x
  | pos (suc x), neg (suc y) => pos x + neg y

\func \infixl 7 * (x y : Int) : Int
  | neg 0, neg (suc n) => neg 0
  | pos 0, _ => pos 0
  | pos x, pos 0 => pos 0
  | neg y, pos 0 => pos 0
  | pos x, neg (suc y) => neg (x Nat.* suc y)
  | pos x, pos y => pos (x Nat.* y)
  | neg (suc x), pos y => neg (suc x Nat.* y)
  | neg (suc x), neg (suc y) => pos (suc x Nat.* suc y)


-- 3. Определите тип данных BinNat для бинарных натуральных чисел.
--    У него должно быть три конструктора: для 0, для чисел вида 2*n и чисел вида 2*n+1.
--    Такой тип данных содержит несколько различных представлений для нуля.
--    Используйте типы данных с условиями, чтобы вычислительно отождествить различные нули.

\data BinNat
  | bnZero
  | bnEven BinNat \with { bnZero => bnZero }
  | bnOdd BinNat

-- 4. Докажите, что функция pred сюръективна.

\func pred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func pred-is-sur : isSur pred => \lam b => \case \elim b \with {
  | 0 => in (0, idp)
  | suc n => in (suc (suc n), idp)
}

-- 5. Докажите, что функция suc не сюръективна.

\func suc-is-not-sur (p : isSur suc) : Empty => \case p 0 \with {
  | in (a, eq) => \case eq
}

-- 6. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g сюръективны, то g `o` f также сюръективна.
--    Докажите, что если g `o` f сюръективна, то g также сюръективна.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-sur {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur f) (q : isSur g) : isSur (g `o` f)
  => \lam c => \case q c \with {
    | in (b, gbc) => \case p b \with {
      | in (a, fab) => in (a, {?}) -- У меня какие-то беды с новой версией ide и плагина, cannot resolve reference rewrite
    }
  }

\func o-sur' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isSur (g `o` f)) : isSur g => \lam b => \case p b \with {
  | in (a, ofgab) => in (f a, {?}) -- cannot resolve reference rewrite
}

-- 7. Определите множество конечных подмножеств множества A, то есть списков элементов A с точностью до перестановок и повторений элементов.

\data Set (A : \Set) : \Set

-- 8. Докажите теорему Кантора.

-- Теорема Кантора говорит, что для любого множества A мощность множества его подмножеств строго больше, чем мощность A.

-- Множество подмножеств можно определить следующим образом:

\func Subs (A : \Set) => A -> \Prop

-- Формально утверждение теоремы Кантора состоит из двух частей:
-- "существует инъекция из A в Subs A" и "не существует сюръекции из A в Subs A".

\func cantor1 (A : \Set) : \Sigma (f : A -> Subs A) (isInj f)
  => {?}

\func cantor2 (A : \Set) (f : A -> Subs A) (p : isSur f) : Empty
  => {?}

-- Optional
-- 9. Постройте функции Nat -> BinNat и BinNat -> Nat и докажите, что они взаимно обратны.

\func NatToBinNat (n : Nat) : BinNat => {?}

\func BinNatToNat (b : BinNat) : Nat => {?}

\func nbn (n : Nat) : BinNatToNat (NatToBinNat n) = n => {?}

\func bnb (b : BinNat) : NatToBinNat (BinNatToNat b) = b => {?}
