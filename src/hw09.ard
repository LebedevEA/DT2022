\import Data.List
\import Function.Meta
\import Logic.Meta
\import Meta
\import Order.LinearOrder
\import Paths.Meta
\import Utils (Maybe, just, maybe, nothing, pmap)
\import hw07
\import lect05
\import lect06 ()
\import lect07(Decide, no, yes)
\import lect09
\open LinearOrder

-- 1. Закончите определение \instance Monad для Term.

\instance TermMonad : Monad Term
  | return => var
  | >>= {A B : \Set} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }
  | return-left {A B : \Set} (a : A) (k : A -> Term B) : return a >>= k = k a => idp
  | return-right {A : \Set} (m : Term A) : m >>= return = m \elim m {
    | app m1 m2 => \let r1 => return-right m1 \in
      rewrite r1 $ (\let r2 => return-right m2 \in
      rewrite r2 idp)
    -- m >>= liftM var
    -- m >>= maybe (var nothing) (\lam a => termMap just (var a))
    -- m >>=
    | lam m => rewrite (liftM-return {A}) $ pmap lam $ return-right m
    | var v => idp
    | unit => idp
  }
  | >>=-assoc {A B C : \Set} (m : Term A) (k : A -> Term B) (l : B -> Term C)
    : (m >>= k) >>= l = m >>= (\lam x => k x >>= l) \elim m {
    | app m1 m2 => rewriteI (>>=-assoc m1 k l) $ rewriteI (>>=-assoc m2 k l) idp
    | lam m => \let a => >>=-assoc m (liftM k) (liftM l) \in rewrite a
      $ pmap lam
      $ pmap (m >>=)
      $ funExt' (\lam a1 => {?})
    | var v => idp
    | unit => idp
  }

  \where {
    \func liftM-return {A : \Set} : liftM {A} return = return => funExt' $ \lam a => \case \elim a \with {
        | nothing => idp
        | just a => idp
      }
  }

-- 2. Определите отношение многошаговой редукции на Term.

\func Red {V : \Set} (t s : Term V) : \Type => ReflTransClosure Red1 t s

-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Set} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | app t1 t2 => \case strategy t2 \with {
    | yes (t2, proof) => yes (app t1 t2, appRight idp proof)
    | no n => \case strategy t1 \with {
      | yes (t1, proof) => yes (app t1 t2, appLeft proof idp)
      | no n1 => \case t1 \as tt, idp : t1 = tt \with {
        | app t t3, _x => no (\lam (s, rs) => aux t1 t2 s (\lam (_x, eqx) => contradiction) rs n1 n)
        | lam t, _x => yes (_, redBeta _x idp)
        | var v, _x => no (\lam (s, rs) => aux t1 t2 s (\lam (_x, eqx) => contradiction) rs n1 n)
        | unit, _x => no (\lam (s, rs) => aux t1 t2 s (\lam (_x, eqx) => contradiction) rs n1 n)
      }
    }
  }
  | lam t => \case strategy t \with {
    | yes (s, r) => yes (lam s, redLam r)
    | no n => no (\lam (s, rs) => aux' t s rs n)
  }
  | var v => no (\lam (s, x) => \case x)
  | unit => no (\lam (s, x) => \case x)
  \where {
    \func aux {V : \Set}
      (t1 t2 s : Term V)
      (t1NotLam : Utils.Not (\Sigma (s : Term (Maybe V)) (t1 = lam s)))
      (rs : Red1 (app t1 t2) s)
      (no1 : Utils.Not (\Sigma (s : Term V) (Red1 t1 s)))
      (no2 : Utils.Not (\Sigma (s : Term V) (Red1 t2 s)))
    : Utils.Empty \elim s, rs
      | s, redBeta p p1 => t1NotLam (_, p)
      | app s s1, appLeft rs idp => no1 (_, rs)
      | app s s1, appRight idp rs => no2 (_, rs)
    \func aux' {V : \Set}
      (t : Term (Maybe V))
      (s : Term V)
      (rs : Red1 (lam t) s)
      (no : Utils.Not (\Sigma (q : Term (Maybe V)) (Red1 t q)))
    : Utils.Empty \elim s, rs
      | lam s, redLam rs => no (s, rs)
  }

-- 4. Докажите, что подтермы достижимого терма достижимы.

\func appAccLeft {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc _x => acc (\lam a' r => appAccLeft $ _x (app a' s) $ appLeft r idp)

\func appAccRight {V : \Set} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc _x => acc (\lam a' r => appAccRight $ _x (app t a') $ appRight idp r)

\func subLamAcc {V : \Set} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc _x => acc (\lam a' r => subLamAcc $ _x (lam a') $ redLam r)

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Set} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1 => {?}

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Set} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}

-- Optional
-- 7. Для доказательства typeableInterp понадобится вспомогательное утверждение. Докажите его.

\data HeadRed {V : \Set} (a t s : Term V) \elim t, s
  | app t1 t2, app s1 s2 => headApp (HeadRed a t1 s1) (t2 = s2)
  | app t a', s => headBeta {f : Term (Maybe V)} (a = a') (lam f = t) (f >>= maybe a var = s)

\func redInterp {V : \Set} {a t s : Term V} {T : Type} (r : HeadRed a t s) (acc : Acc Red1 a) (q : Interp T s) : Interp T t
  => {?}

-- 8. Докажите typeableInterp из лекции